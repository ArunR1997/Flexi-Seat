using FlexiSeat.Data;
using FlexiSeat.DbContext;
using FlexiSeat.DTO;
using FlexiSeat.Helper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Net.Mail;
using System.Net;
using Azure.Core;
using static System.Net.WebRequestMethods;

namespace FlexiSeat.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class LoginController : ControllerBase
    {
        private readonly FlexiSeatDbContext _context;
        private readonly ILogger<LoginController> _logger;
        public LoginController(ILogger<LoginController> logger, FlexiSeatDbContext context)
        {
            _logger = logger;
            _context = context;
        }
        [HttpPost("Register")]
        public async Task<IActionResult> Register([FromBody] RegisterDto dto)
        {
            if (await _context.UserLogins.AnyAsync(e => e.ADID == dto.ADID))
                return Conflict("ADID already exists.");

            var generatedPwd = PasswordHelper.Generate();

            var newUser = new UserLogin
            {
                ADID = dto.ADID,
                PasswordHash = PasswordHelper.HashPassword(generatedPwd)
            };

            _context.UserLogins.Add(newUser);
            await _context.SaveChangesAsync();

            string recipientEmail = $"{dto.ADID}@yourdomain.com";

            string htmlBody = $@"
            <html>
                <body style='font-family: Arial, sans-serif;'>
                    <h2 style='color: #2e6c80;'>Welcome to UPS Flexiseats</h2>
                    <p>Hello,</p>
                    <p>Your account has been created in UPS Flexiseats with the autogenerated password <strong style='font-size: 18px;'>{generatedPwd}</strong></p>
                    <p>Kindly change the password on your first login</p>
                    <p>Visit the site and book your seats</p>
                    
                    <br/>
                    <p>Thanks,<br/>UPS Flexiseats Support Team</p>
                </body>
            </html>";


            var subject = "Your UPS Flexiseats Account has been created!!!";
            await EmailHelper.SendEmailAsync(recipientEmail, subject, htmlBody, true);
            return Ok(new { message = "User registered successfully." });
        }
        // POST: api/Login
        [HttpPost]
        public async Task<IActionResult> Login([FromBody] LoginDto dto)
        {
            var user = await _context.UserLogins.FindAsync(dto.ADID);
            if (user == null || !PasswordHelper.VerifyPassword(dto.Password, user.PasswordHash))
                return Unauthorized("Invalid ADID");

            return Ok();
        }

        [HttpPost("getOTP")]
        public async Task<IActionResult> GenerateOtp([FromBody] PasswordResetDto dto, [FromQuery] bool isForgot = false)
        {
            var user = await _context.UserLogins.FindAsync(dto.ADID);
            if (user == null)
            {
                return Unauthorized("Invalid ADID");
            }
            if (!isForgot)
            {
                if (!PasswordHelper.VerifyPassword(dto.OldPassword, user.PasswordHash))
                    return Unauthorized("Invalid old password.");
            }

            // Generate random 6-digit OTP
            var random = new Random();
            string otp = random.Next(100000, 999999).ToString();

            // Save OTP to user entity
            user.OTP = otp;
            user.OTPGeneratedAt = DateTime.UtcNow; // optional if you want to expire OTPs
            await _context.SaveChangesAsync();

            // Send OTP via email
            string recipientEmail = $"{dto.ADID}@yourdomain.com";
            string htmlBody = $@"
            <html>
                <body style='font-family: Arial, sans-serif;'>
                    <p>Hello,</p>
                    <p>OTP for your password change<strong style='font-size: 18px;'>{otp}</strong></p>
                    <p>OTP will expire in 5 minutes</p>
                    <br/>
                    <p>Thanks,<br/>UPS Flexiseats Support Team</p>
                </body>
            </html>";


            var subject = "UPS Flexiseats - OTP";

            await EmailHelper.SendEmailAsync(recipientEmail, subject, htmlBody, true);

            return Ok(new { message = "OTP sent successfully." });
        }




        // POST: api/Login/VerifyOtp
        [HttpPatch("VerifyOtp")]
        public async Task<IActionResult> VerifyOtpAndUpdatePassword([FromBody] PasswordResetDto dto)
        {
            var user = await _context.UserLogins.FindAsync(dto.ADID);
            if (user == null || user.OTP != dto.OTP)
                return Unauthorized("Invalid OTP.");

            var expiry = user.OTPGeneratedAt?.AddMinutes(5);
            if (expiry < DateTime.UtcNow)
                return Unauthorized("OTP expired.");

            user.PasswordHash = PasswordHelper.HashPassword(dto.NewPassword);
            user.OTP = null;
            user.OTPGeneratedAt = null;
            await _context.SaveChangesAsync();

            return Ok(new { message = "OTP verified & new password updated" });
        }
    }

}
